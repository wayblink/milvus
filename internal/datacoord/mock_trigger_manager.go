// Code generated by mockery v2.32.4. DO NOT EDIT.

package datacoord

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockTriggerManager is an autogenerated mock type for the TriggerManager type
type MockTriggerManager struct {
	mock.Mock
}

type MockTriggerManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTriggerManager) EXPECT() *MockTriggerManager_Expecter {
	return &MockTriggerManager_Expecter{mock: &_m.Mock}
}

// ManualTrigger provides a mock function with given fields: ctx, collectionID, clusteringCompaction
func (_m *MockTriggerManager) ManualTrigger(ctx context.Context, collectionID int64, clusteringCompaction bool) (int64, error) {
	ret := _m.Called(ctx, collectionID, clusteringCompaction)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, bool) (int64, error)); ok {
		return rf(ctx, collectionID, clusteringCompaction)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, bool) int64); ok {
		r0 = rf(ctx, collectionID, clusteringCompaction)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, bool) error); ok {
		r1 = rf(ctx, collectionID, clusteringCompaction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTriggerManager_ManualTrigger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ManualTrigger'
type MockTriggerManager_ManualTrigger_Call struct {
	*mock.Call
}

// ManualTrigger is a helper method to define mock.On call
//   - ctx context.Context
//   - collectionID int64
//   - clusteringCompaction bool
func (_e *MockTriggerManager_Expecter) ManualTrigger(ctx interface{}, collectionID interface{}, clusteringCompaction interface{}) *MockTriggerManager_ManualTrigger_Call {
	return &MockTriggerManager_ManualTrigger_Call{Call: _e.mock.On("ManualTrigger", ctx, collectionID, clusteringCompaction)}
}

func (_c *MockTriggerManager_ManualTrigger_Call) Run(run func(ctx context.Context, collectionID int64, clusteringCompaction bool)) *MockTriggerManager_ManualTrigger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(bool))
	})
	return _c
}

func (_c *MockTriggerManager_ManualTrigger_Call) Return(_a0 int64, _a1 error) *MockTriggerManager_ManualTrigger_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTriggerManager_ManualTrigger_Call) RunAndReturn(run func(context.Context, int64, bool) (int64, error)) *MockTriggerManager_ManualTrigger_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTriggerManager creates a new instance of MockTriggerManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTriggerManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTriggerManager {
	mock := &MockTriggerManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
