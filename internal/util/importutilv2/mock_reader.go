// Code generated by mockery v2.30.1. DO NOT EDIT.

package importutilv2

import (
	storage "github.com/milvus-io/milvus/internal/storage"
	mock "github.com/stretchr/testify/mock"
)

// MockReader is an autogenerated mock type for the Reader type
type MockReader struct {
	mock.Mock
}

type MockReader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReader) EXPECT() *MockReader_Expecter {
	return &MockReader_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockReader) Close() {
	_m.Called()
}

// MockReader_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockReader_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockReader_Expecter) Close() *MockReader_Close_Call {
	return &MockReader_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockReader_Close_Call) Run(run func()) *MockReader_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockReader_Close_Call) Return() *MockReader_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockReader_Close_Call) RunAndReturn(run func()) *MockReader_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields:
func (_m *MockReader) Read() (*storage.InsertData, error) {
	ret := _m.Called()

	var r0 *storage.InsertData
	var r1 error
	if rf, ok := ret.Get(0).(func() (*storage.InsertData, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *storage.InsertData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.InsertData)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReader_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockReader_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
func (_e *MockReader_Expecter) Read() *MockReader_Read_Call {
	return &MockReader_Read_Call{Call: _e.mock.On("Read")}
}

func (_c *MockReader_Read_Call) Run(run func()) *MockReader_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockReader_Read_Call) Return(_a0 *storage.InsertData, _a1 error) *MockReader_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReader_Read_Call) RunAndReturn(run func() (*storage.InsertData, error)) *MockReader_Read_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockReader creates a new instance of MockReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReader {
	mock := &MockReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
